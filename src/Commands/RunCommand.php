<?php
namespace TheCodingMachine\WashingMachine\Commands;

use Gitlab\Client;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use TheCodingMachine\WashingMachine\Clover\CloverFile;
use TheCodingMachine\WashingMachine\Clover\DiffService;
use TheCodingMachine\WashingMachine\Gitlab\BuildNotFoundException;
use TheCodingMachine\WashingMachine\Gitlab\BuildService;
use TheCodingMachine\WashingMachine\Gitlab\MergeRequestNotFoundException;
use TheCodingMachine\WashingMachine\Gitlab\SendCommentService;

class RunCommand extends Command
{

    protected function configure()
    {
        $this
            ->setName('run')
            ->setDescription('Analyses the coverage report files and upload the result to Gitlab')
            //->setHelp("This command allows you to create users...")
            ->addOption('clover',
                'c',
                InputOption::VALUE_REQUIRED,
                'The path to the clover file generated by PHPUnit.',
                'clover.xml')
            ->addOption('gitlab-url',
                'u',
                InputOption::VALUE_REQUIRED,
                'The Gitlab URL. If not specified, it is deduced from the CI_BUILD_REPO environment variable.',
                null)
            ->addOption('gitlab-api-token',
                't',
                InputOption::VALUE_REQUIRED,
                'The Gitlab API token. If not specified, it is fetched from the GITLAB_API_TOKEN environment variable.',
                null)
            /*->addOption('gitlab-project-id',
                'p',
                InputOption::VALUE_REQUIRED,
                'The Gitlab project ID. If not specified, it is fetched from the CI_PROJECT_ID environment variable.',
                null)*/
            ->addOption('gitlab-project-name',
                'p',
                InputOption::VALUE_REQUIRED,
                'The Gitlab project name (in the form "group/name"). If not specified, it is deduced from the CI_PROJECT_DIR environment variable.',
                null)
            ->addOption('gitlab-build-ref',
                'r',
                InputOption::VALUE_REQUIRED,
                'The Gitlab CI build reference. If not specified, it is deduced from the CI_BUILD_REF environment variable.',
                null)
        ;
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $config = new Config($input);

        $cloverFilePath = $config->getCloverFilePath();

        $cloverFile = CloverFile::fromFile($cloverFilePath, getcwd());
        $output->writeln(sprintf('Code coverage: %.2f%%', $cloverFile->getCoveragePercentage()*100));

        $gitlabApiToken = $config->getGitlabApiToken();

        $gitlabUrl = $config->getGitlabUrl();



        /*$projectId = $input->getOption('gitlab-project-id');
        if ($projectId === null) {
            $projectId = getenv('CI_PROJECT_ID');
            if ($projectId === false) {
                throw new \RuntimeException('Could not find the Gitlab project ID in the "CI_PROJECT_ID" environment variable (usually set by Gitlab CI). Either set this environment variable or pass the ID via the --gitlab-project-id command line option.');
            }
        }*/

        $projectName = $config->getGitlabProjectName();

        $buildRef = $config->getGitlabBuildRef();


        $client = new Client($gitlabUrl);
        $client->authenticate($gitlabApiToken);

        $diffService = new DiffService(1, 20);

        $sendCommentService = new SendCommentService($client, $diffService);

        // From CI_BUILD_REF, we can get the commit ( -> project -> build -> commit )
        // From the merge_requests API, we can get the list of commits for a single merge request
        // Hence, we can find the merge_request matching a build!

        // STOPPPPP!
        // Even better! For a given commit, we can add comments! (good for basic processing, but we still need the MR to compare with base branch!)

        $buildService = new BuildService($client);

        try {
            $mergeRequest = $buildService->findMergeRequestByBuildRef($projectName, $buildRef);


            $previousCloverFile = $this->getCloverFileFromBranch($buildService, $mergeRequest['target_project_id'], $mergeRequest['target_branch']);

            //var_dump($previousCloverFile->getCoveragePercentage());exit;

            //$artifactContent = $client->projects->buildArtifacts($mergeRequest['target_project_id'], $build['id']);
            //file_put_contents('artifact.zip', $artifactContent);
            //exit;
            //var_dump($build);exit;

            //var_dump($mergeRequest); exit;
            $sendCommentService->sendCodeCoverageCommentToMergeRequest($cloverFile, $previousCloverFile, $projectName, $mergeRequest['id']);

        } catch (MergeRequestNotFoundException $e) {
            // If there is no merge request attached to this build, let's still make some comments on the commit itself!

            // TODO
            $output->writeln('It seems that this CI build is not part of a merge request. Skipping.');
        }

        try {
            // TODO: move getenv to something testable!!!
            $lastCommitBuild = $buildService->getLatestBuildFromBranch($projectName, getenv('CI_BUILD_REF_NAME'));
            $lastCommitCloverFile = $this->getCloverFileFromBranch($buildService, $mergeRequest['target_project_id'], $mergeRequest['target_branch']);
            $sendCommentService->sendDifferencesComments($cloverFile, $lastCommitCloverFile, $projectName, $lastCommitBuild['id'] /*$buildService->getCommitId($projectName, $buildRef)*/);
        } catch (BuildNotFoundException $e) {
            $output->writeln('Unable to find a previous build for this branch. '.$e->getMessage());
        }



        // MR: target_branch
        // MR: target_project_id

        //var_dump($buildService->getCommitId($projectName, $buildRef));exit;
        //var_dump($buildService->findMergeRequestByBuildRef($projectName, $buildRef));exit;


    }

    public function getCloverFileFromBranch(BuildService $buildService, string $projectName, string $targetBranch) : CloverFile
    {
        $tmpFile = tempnam(sys_get_temp_dir(), 'art').'.zip';

        $buildService->dumpArtifactFromBranch($projectName, $targetBranch, $tmpFile);
        $zipFile = new \ZipArchive();
        if ($zipFile->open($tmpFile)!==true) {
            throw new \RuntimeException('Invalid ZIP archive '.$tmpFile);
        }
        $cloverFileString = $zipFile->getFromName('clover.xml');

        $cloverFile = CloverFile::fromString($cloverFileString, getcwd());
        return $cloverFile;
    }
}

/*
=================ENV IN A PR CONTEXT =========================

CI_BUILD_TOKEN=xxxxxx
HOSTNAME=runner-9431b96d-project-428-concurrent-0
PHP_INI_DIR=/usr/local/etc/php
PHP_ASC_URL=https://secure.php.net/get/php-7.0.15.tar.xz.asc/from/this/mirror
CI_BUILD_BEFORE_SHA=7af13f8e3bd090c7c34750e4badfc66a5f0af110
CI_SERVER_VERSION=
CI_BUILD_ID=109
OLDPWD=/
PHP_CFLAGS=-fstack-protector-strong -fpic -fpie -O2
PHP_MD5=dca23412f3e3b3987e582091b751925d
CI_PROJECT_ID=428
PHPIZE_DEPS=autoconf 		file 		g++ 		gcc 		libc-dev 		make 		pkg-config 		re2c
PHP_URL=https://secure.php.net/get/php-7.0.15.tar.xz/from/this/mirror
CI_BUILD_REF_NAME=feature/js-ci
CI_BUILD_REF=7af13f8e3bd090c7c34750e4badfc66a5f0af110
PHP_LDFLAGS=-Wl,-O1 -Wl,--hash-style=both -pie
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
CI_BUILD_STAGE=test
CI_PROJECT_DIR=/builds/tcm-projects/uneo
PHP_CPPFLAGS=-fstack-protector-strong -fpic -fpie -O2
GPG_KEYS=1A4E8B7277C42E53DBA9C7B9BCAA30EA9C0D5763 6E4F6AB321FDC07F2C332E3AC2BF0BC433CFC8B3
PWD=/builds/tcm-projects/uneo
CI_DEBUG_TRACE=false
CI_SERVER_NAME=GitLab CI
XDEBUG_VERSION=2.5.0
GITLAB_CI=true
CI_SERVER_REVISION=
CI_BUILD_NAME=test:app
HOME=/root
SHLVL=1
PHP_SHA256=300364d57fc4a6176ff7d52d390ee870ab6e30df121026649f8e7e0b9657fe93
CI_SERVER=yes
CI=true
CI_BUILD_REPO=http://gitlab-ci-token:xxxxxx@git.thecodingmachine.com/tcm-projects/uneo.git
PHP_VERSION=7.0.15

===================ENV IN A COMMIT CONTEXT

CI_BUILD_TOKEN=xxxxxx
HOSTNAME=runner-9431b96d-project-447-concurrent-0
PHP_INI_DIR=/usr/local/etc/php
PHP_ASC_URL=https://secure.php.net/get/php-7.0.15.tar.xz.asc/from/this/mirror
CI_BUILD_BEFORE_SHA=42dd9686eafc2e8fb0a6b4d2c6785baec229c94a
CI_SERVER_VERSION=
CI_BUILD_ID=192
OLDPWD=/
PHP_CFLAGS=-fstack-protector-strong -fpic -fpie -O2
PHP_MD5=dca23412f3e3b3987e582091b751925d
CI_PROJECT_ID=447
GITLAB_API_TOKEN=xxxxxxxxxxxxxxchangedmanually
PHPIZE_DEPS=autoconf 		file 		g++ 		gcc 		libc-dev 		make 		pkg-config 		re2c
PHP_URL=https://secure.php.net/get/php-7.0.15.tar.xz/from/this/mirror
CI_BUILD_REF_NAME=master
CI_BUILD_REF=42dd9686eafc2e8fb0a6b4d2c6785baec229c94a
PHP_LDFLAGS=-Wl,-O1 -Wl,--hash-style=both -pie
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
CI_BUILD_STAGE=test
CI_PROJECT_DIR=/builds/dan/washing-test
PHP_CPPFLAGS=-fstack-protector-strong -fpic -fpie -O2
GPG_KEYS=1A4E8B7277C42E53DBA9C7B9BCAA30EA9C0D5763 6E4F6AB321FDC07F2C332E3AC2BF0BC433CFC8B3
PWD=/builds/dan/washing-test
CI_DEBUG_TRACE=false
CI_SERVER_NAME=GitLab CI
XDEBUG_VERSION=2.5.0
GITLAB_CI=true
CI_SERVER_REVISION=
CI_BUILD_NAME=test
HOME=/root
SHLVL=1
PHP_SHA256=300364d57fc4a6176ff7d52d390ee870ab6e30df121026649f8e7e0b9657fe93
CI_SERVER=yes
CI=true
CI_BUILD_REPO=http://gitlab-ci-token:xxxxxx@git.thecodingmachine.com/dan/washing-test.git
PHP_VERSION=7.0.15
*/